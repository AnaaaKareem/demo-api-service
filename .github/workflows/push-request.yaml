name: Build Images

on:
  push:
    branches:
      - 'main'
    paths:
      - 'terraform/**'
      - 'server/**'
      - 'k8s/**'
      - '.github/workflows/push-request.yaml'


jobs:

  ServerTest:
    
    runs-on: ubuntu-latest
    
    defaults:
     run:
      working-directory: server
       
    
    # Setup multiple node versions to test
    strategy:
      matrix:
        node: [20]

    steps:
      - uses: actions/checkout@v5

      - name: Use node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      
      # Install npm dependencies before build
      - name: Check Dependencies
        run:  | 
          npm ci && \
          npm cache clean --force
      - name: Remove Dependencies to build image
        run: rm -rf node_modules  
  
  TerraformBuild:
    
    runs-on: ubuntu-latest
    needs: [ ServerTest ]
    outputs:
      node_app_name: ${{ steps.node_app_name.outputs.node_app_name }}
      cluster_name: ${{ steps.cluster_name.outputs.cluster_name }}
    env:
      TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    defaults:
     run:
      working-directory: terraform
    
    steps:
      - uses: actions/checkout@v5
      
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -input=false

      - name: Terraform Apply
        id: Apply
        run: terraform apply -auto-approve -no-color
        continue-on-error: false

      - name: Terraform Node App Name
        id: node_app_name
        run: echo "node_app_name=$(terraform output -raw node_app_name)" >> $GITHUB_OUTPUT

      - name: Terraform Cluster Name
        id: cluster_name
        run: echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT

  ImageBuildAndPublish:

    runs-on: ubuntu-latest
    needs: [ TerraformBuild ]
    
    defaults:
     run:
      working-directory: server

    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ needs.TerraformBuild.outputs.node_app_name }}
          IMAGE_TAG: "latest"
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  BuildCluster:

    runs-on: ubuntu-latest
    needs: [ TerraformBuild, ImageBuildAndPublish ]
    
    defaults:
     run:
      working-directory: k8s

    steps:

      - uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.region }}

      - name: Inject Image Registery Secret
        env:
          ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
          REGION: ${{ vars.region }}
        run: |
          aws ecr get-login-password --region ${{ vars.region }} | kubectl create secret docker-registry ecr-secret \
            --docker-server=${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ vars.region }}.amazonaws.com \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region ${{ vars.region }})
      
      - name: Deploy to eks
        run: |
          kubectl apply -f k8s-deployment.yaml
          kubectl apply -f k8s-service.yaml

        continue-on-error: false

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ needs.TerraformBuild.outputs.cluster_name }} --region ${{ vars.region }}